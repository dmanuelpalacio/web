import { useState, useRef, useEffect } from 'react';
import { Play, Pause, Square, Volume2, RotateCcw, Shuffle, SkipBack, SkipForward, Music, Zap, X, Settings, Sliders, Equalizer } from 'lucide-react';
import { AdvancedMIDISynthesizer } from './AdvancedMIDISynthesizer';

// Wrapper para mantener compatibilidad con AdvancedMIDISynthesizer
class SimpleMIDISynthesizer {
  private advancedSynth: AdvancedMIDISynthesizer;

  constructor() {
    this.advancedSynth = new AdvancedMIDISynthesizer();
  }

  setVolume(volume: number) {
    this.advancedSynth.setVolume(volume);
  }

  setProgressCallback(callback: (progress: number, currentTime: number, duration: number) => void) {
    this.advancedSynth.setProgressCallback(callback);
  }

  getCurrentTime(): number {
    return this.advancedSynth.getCurrentTime();
  }

  getDuration(): number {
    return this.advancedSynth.getDuration();
  }

  playTrack(trackId: number) {
    this.advancedSynth.playTrack(trackId);
  }

  stopTrack() {
    this.advancedSynth.stopTrack();
  }

  pause() {
    this.advancedSynth.pause();
  }

  resume() {
    this.advancedSynth.resume();
  }

  seekTo(percentage: number) {
    this.advancedSynth.seekTo(percentage);
  }

  // Métodos adicionales para control avanzado
  setParameter(param: string, value: number) {
    this.advancedSynth.setParameter(param, value);
  }

  getAnalyserData(): Uint8Array {
    return this.advancedSynth.getAnalyserData();
  }
}

interface Track {
  id: number;
  name: string;
  genre: string;
  bpm: number;
  duration: string;
  color: string;
  description: string;
}

const ReproductorMIDI = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTrack, setCurrentTrack] = useState(0);
  const [volume, setVolume] = useState(70);
  const [progress, setProgress] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isExpanded, setIsExpanded] = useState(false);
  const [isShuffled, setIsShuffled] = useState(false);
  const [isLooped, setIsLooped] = useState(false);
  const [showControls, setShowControls] = useState(false);
  const [isVolumeVisible, setIsVolumeVisible] = useState(false);
  
  // Estados para controles avanzados
  const [showAdvancedControls, setShowAdvancedControls] = useState(false);
  const [audioParams, setAudioParams] = useState({
    reverb: 30,
    delay: 20,
    cutoff: 80,
    resonance: 10,
    attack: 5,
    decay: 15,
    sustain: 60,
    release: 30
  });
  const [isVisualizing, setIsVisualizing] = useState(false);
  const [analyserData, setAnalyserData] = useState<Uint8Array>(new Uint8Array(0));

  const synthRef = useRef<SimpleMIDISynthesizer | null>(null);
  const volumeTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const tracks: Track[] = [
    { id: 1, name: "Retro Arte", genre: "Synthwave", bpm: 115, duration: "0:32", color: "from-purple-500 to-pink-500", description: "Síntesis FM retro con modulación profunda" },
    { id: 2, name: "Neon Nights '85", genre: "Synthwave", bpm: 120, duration: "0:28", color: "from-cyan-500 to-blue-500", description: "Filtros sweep y síntesis sustractiva" },
    { id: 3, name: "Digital Renaissance", genre: "Ambient Techno", bpm: 110, duration: "0:45", color: "from-green-500 to-teal-500", description: "Síntesis aditiva con harmonicos complejos" },
    { id: 4, name: "Quantum Dreams", genre: "Ambient", bpm: 85, duration: "4:45", color: "from-indigo-500 to-purple-500", description: "Síntesis granular etérea y espacial" },
    { id: 5, name: "Underground Pulse", genre: "Techno", bpm: 130, duration: "0:22", color: "from-red-500 to-orange-500", description: "Bass synthesis con sub-oscilador potente" },
    { id: 6, name: "Deep House Voyage", genre: "Deep House", bpm: 125, duration: "2:15", color: "from-yellow-500 to-orange-500", description: "Síntesis análoga clásica warm" },
    { id: 7, name: "Café Midnight", genre: "Lo-Fi Jazz", bpm: 95, duration: "5:12", color: "from-brown-500 to-amber-500", description: "Síntesis jazz suave con reverb profundo" },
    { id: 8, name: "Cartagena Sunset", genre: "Tropical House", bpm: 110, duration: "1:45", color: "from-orange-500 to-red-500", description: "Síntesis tipo marimba tropical" },
    { id: 9, name: "Salsa Futurista", genre: "Latin Electronic", bpm: 140, duration: "1:23", color: "from-pink-500 to-red-500", description: "Síntesis percusiva con modulación rápida" },
    { id: 10, name: "Cumbia Espacial", genre: "Cumbia Digital", bpm: 100, duration: "2:30", color: "from-green-500 to-yellow-500", description: "Síntesis etérea con efectos cósmicos" },
    { id: 11, name: "Vallenato Cyber", genre: "Folk Electronic", bpm: 90, duration: "3:45", color: "from-blue-500 to-green-500", description: "Síntesis folk digital con calidez" },
    { id: 12, name: "Bambuco Digital", genre: "World Electronic", bpm: 75, duration: "4:22", color: "from-purple-500 to-blue-500", description: "Síntesis clásica con elementos tradicionales" },
    { id: 13, name: "Reggaeton 2050", genre: "Urban Electronic", bpm: 95, duration: "1:56", color: "from-gray-500 to-slate-500", description: "Síntesis urbana con groove futurista" },
    { id: 14, name: "Champeta Galáctica", genre: "Afro Electronic", bpm: 115, duration: "1:28", color: "from-orange-500 to-yellow-500", description: "Síntesis afro con modulación compleja" },
    { id: 15, name: "Tropical Matrix", genre: "Neo-Tropical", bpm: 105, duration: "2:45", color: "from-teal-500 to-cyan-500", description: "Síntesis matrix con elementos caribeños" },
    { id: 16, name: "Arte Infinito", genre: "Ambient Art", bpm: 75, duration: "1:36", color: "from-violet-500 to-purple-500", description: "Loop artístico infinito con síntesis profunda" }
  ];

  useEffect(() => {
    synthRef.current = new SimpleMIDISynthesizer();
    synthRef.current.setProgressCallback((prog, curr, dur) => {
      setProgress(prog);
      setCurrentTime(curr);
      setDuration(dur);
      
      if (prog >= 100) {
        handleNext();
      }
    });

    return () => {
      if (synthRef.current) {
        synthRef.current.stopTrack();
      }
    };
  }, []);

  // Visualización de audio
  useEffect(() => {
    if (isVisualizing && synthRef.current && canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      if (!ctx) return;

      const draw = () => {
        if (!synthRef.current || !isVisualizing) return;
        
        const data = synthRef.current.getAnalyserData();
        
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        
        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        const barWidth = canvas.width / data.length;
        let x = 0;
        
        for (let i = 0; i < data.length; i++) {
          const barHeight = (data[i] / 255) * canvas.height * 0.8;
          
          const hue = (i / data.length) * 360;
          ctx.fillStyle = `hsl(${hue}, 70%, 60%)`;
          ctx.fillRect(x, canvas.height - barHeight, barWidth - 1, barHeight);
          
          x += barWidth;
        }
        
        requestAnimationFrame(draw);
      };
      
      draw();
    }
  }, [isVisualizing]);

  // Aplicar cambios de parámetros de audio
  useEffect(() => {
    if (synthRef.current) {
      Object.entries(audioParams).forEach(([param, value]) => {
        synthRef.current!.setParameter(param, value / 100);
      });
    }
  }, [audioParams]);

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handlePlay = () => {
    if (!synthRef.current) return;
    
    if (isPlaying) {
      synthRef.current.pause();
      setIsPlaying(false);
    } else {
      if (progress > 0) {
        synthRef.current.resume();
      } else {
        synthRef.current.playTrack(currentTrack);
      }
      setIsPlaying(true);
    }
  };

  const handleStop = () => {
    if (synthRef.current) {
      synthRef.current.stopTrack();
      setIsPlaying(false);
      setProgress(0);
      setCurrentTime(0);
    }
  };

  const handleNext = () => {
    let nextTrack;
    if (isShuffled) {
      nextTrack = Math.floor(Math.random() * tracks.length);
    } else {
      nextTrack = (currentTrack + 1) % tracks.length;
    }
    
    setCurrentTrack(nextTrack);
    setProgress(0);
    setCurrentTime(0);
    
    if (isPlaying && synthRef.current) {
      synthRef.current.playTrack(nextTrack);
    }
  };

  const handlePrevious = () => {
    let prevTrack;
    if (isShuffled) {
      prevTrack = Math.floor(Math.random() * tracks.length);
    } else {
      prevTrack = currentTrack === 0 ? tracks.length - 1 : currentTrack - 1;
    }
    
    setCurrentTrack(prevTrack);
    setProgress(0);
    setCurrentTime(0);
    
    if (isPlaying && synthRef.current) {
      synthRef.current.playTrack(prevTrack);
    }
  };

  const handleVolumeChange = (newVolume: number) => {
    setVolume(newVolume);
    if (synthRef.current) {
      synthRef.current.setVolume(newVolume);
    }
  };

  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const percentage = (clickX / rect.width) * 100;
    
    if (synthRef.current) {
      synthRef.current.seekTo(percentage);
    }
  };

  const handleTrackSelect = (trackIndex: number) => {
    setCurrentTrack(trackIndex);
    setProgress(0);
    setCurrentTime(0);
    
    if (synthRef.current) {
      if (isPlaying) {
        synthRef.current.playTrack(trackIndex);
      }
    }
  };

  const handleVolumeMouseEnter = () => {
    setIsVolumeVisible(true);
    if (volumeTimeoutRef.current) {
      clearTimeout(volumeTimeoutRef.current);
    }
  };

  const handleVolumeMouseLeave = () => {
    volumeTimeoutRef.current = setTimeout(() => {
      setIsVolumeVisible(false);
    }, 1000);
  };

  const handleParameterChange = (param: string, value: number) => {
    setAudioParams(prev => ({
      ...prev,
      [param]: value
    }));
  };

  const currentTrackData = tracks[currentTrack];

  if (!isExpanded) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <button
          onClick={() => setIsExpanded(true)}
          className="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 rounded-full shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 hover:scale-110 group"
        >
          <Music className="w-6 h-6 group-hover:animate-pulse" />
        </button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 left-6 z-50 bg-black/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-purple-500/20 overflow-hidden">
      <div className="p-6 min-w-[400px]">
        {/* Header con controles de ventana */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            <span className="text-white/60 text-sm ml-2">NÚCLEO SOUND</span>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowAdvancedControls(!showAdvancedControls)}
              className={`p-2 rounded-lg transition-colors ${showAdvancedControls ? 'bg-purple-600 text-white' : 'text-white/60 hover:text-white hover:bg-white/10'}`}
            >
              <Settings className="w-4 h-4" />
            </button>
            <button
              onClick={() => setIsVisualizing(!isVisualizing)}
              className={`p-2 rounded-lg transition-colors ${isVisualizing ? 'bg-blue-600 text-white' : 'text-white/60 hover:text-white hover:bg-white/10'}`}
            >
              <Equalizer className="w-4 h-4" />
            </button>
            <button
              onClick={() => setIsExpanded(false)}
              className="text-white/60 hover:text-white transition-colors p-2 hover:bg-white/10 rounded-lg"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Visualizador de audio */}
        {isVisualizing && (
          <div className="mb-4 h-24 rounded-lg overflow-hidden bg-black/50">
            <canvas 
              ref={canvasRef}
              className="w-full h-full"
              style={{ width: '100%', height: '100%' }}
            />
          </div>
        )}

        {/* Información del track actual */}
        <div className="flex items-center space-x-4 mb-4">
          <div className={`w-16 h-16 rounded-lg bg-gradient-to-br ${currentTrackData.color} flex items-center justify-center shadow-lg`}>
            <Music className="w-8 h-8 text-white" />
          </div>
          <div className="flex-1">
            <h3 className="text-white font-semibold text-lg">{currentTrackData.name}</h3>
            <p className="text-white/60 text-sm">{currentTrackData.genre} - {currentTrackData.bpm} BPM</p>
            <p className="text-white/40 text-xs">{currentTrackData.description}</p>
          </div>
        </div>

        {/* Controles avanzados */}
        {showAdvancedControls && (
          <div className="mb-4 p-4 bg-white/5 rounded-lg space-y-3">
            <h4 className="text-white/80 text-sm font-medium mb-3 flex items-center">
              <Sliders className="w-4 h-4 mr-2" />
              Controles Avanzados de Síntesis
            </h4>
            <div className="grid grid-cols-2 gap-3">
              {Object.entries(audioParams).map(([param, value]) => (
                <div key={param} className="space-y-1">
                  <label className="text-white/60 text-xs uppercase tracking-wider">
                    {param}
                  </label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={value}
                      onChange={(e) => handleParameterChange(param, parseInt(e.target.value))}
                      className="flex-1 h-2 bg-white/10 rounded-full appearance-none slider-thumb"
                    />
                    <span className="text-white/60 text-xs w-8 text-right">
                      {value}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Barra de progreso */}
        <div className="mb-4">
          <div 
            className="w-full h-2 bg-white/10 rounded-full cursor-pointer overflow-hidden"
            onClick={handleProgressClick}
          >
            <div 
              className="h-full bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-150 ease-linear"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <div className="flex justify-between text-white/60 text-xs mt-1">
            <span>{formatTime(currentTime)}</span>
            <span>{formatTime(duration)}</span>
          </div>
        </div>

        {/* Controles principales */}
        <div className="flex items-center justify-center space-x-4 mb-4">
          <button
            onClick={() => setIsShuffled(!isShuffled)}
            className={`p-3 rounded-full transition-all ${isShuffled ? 'bg-purple-600 text-white' : 'text-white/60 hover:text-white hover:bg-white/10'}`}
          >
            <Shuffle className="w-5 h-5" />
          </button>
          <button
            onClick={handlePrevious}
            className="text-white/60 hover:text-white transition-colors p-3 hover:bg-white/10 rounded-full"
          >
            <SkipBack className="w-6 h-6" />
          </button>
          <button
            onClick={handlePlay}
            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 rounded-full hover:shadow-lg hover:shadow-purple-500/25 transition-all duration-300 hover:scale-105"
          >
            {isPlaying ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
          </button>
          <button
            onClick={handleNext}
            className="text-white/60 hover:text-white transition-colors p-3 hover:bg-white/10 rounded-full"
          >
            <SkipForward className="w-6 h-6" />
          </button>
          <button
            onClick={handleStop}
            className="text-white/60 hover:text-white transition-colors p-3 hover:bg-white/10 rounded-full"
          >
            <Square className="w-5 h-5" />
          </button>
        </div>

        {/* Control de volumen */}
        <div 
          className="flex items-center space-x-3 mb-4"
          onMouseEnter={handleVolumeMouseEnter}
          onMouseLeave={handleVolumeMouseLeave}
        >
          <Volume2 className="w-5 h-5 text-white/60" />
          <div className={`flex-1 transition-all duration-300 ${isVolumeVisible ? 'opacity-100' : 'opacity-0'}`}>
            <input
              type="range"
              min="0"
              max="100"
              value={volume}
              onChange={(e) => handleVolumeChange(parseInt(e.target.value))}
              className="w-full h-2 bg-white/10 rounded-full appearance-none slider-thumb"
            />
          </div>
          <span className="text-white/60 text-sm w-8 text-right">{volume}</span>
        </div>

        {/* Lista de tracks */}
        <div className="max-h-48 overflow-y-auto custom-scrollbar">
          <h4 className="text-white/60 text-sm font-medium mb-2">Playlist</h4>
          <div className="space-y-1">
            {tracks.map((track, index) => (
              <div
                key={track.id}
                onClick={() => handleTrackSelect(index)}
                className={`flex items-center space-x-3 p-2 rounded-lg cursor-pointer transition-all ${
                  index === currentTrack 
                    ? 'bg-purple-600/20 border border-purple-500/30' 
                    : 'hover:bg-white/5'
                }`}
              >
                <div className="flex items-center justify-center w-8 h-8 rounded bg-white/10 text-white/60 text-xs">
                  {index + 1}
                </div>
                <div className="flex-1">
                  <p className="text-white text-sm">{track.name}</p>
                  <p className="text-white/60 text-xs">{track.genre} - {track.bpm} BPM</p>
                </div>
                <span className="text-white/40 text-xs">{track.duration}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Estilos CSS adicionales para los sliders
const style = document.createElement('style');
style.textContent = `
  .slider-thumb::-webkit-slider-thumb {
    appearance: none;
    width: 16px;
    height: 16px;
    background: linear-gradient(135deg, #8b5cf6, #3b82f6);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
  }
  
  .slider-thumb::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: linear-gradient(135deg, #8b5cf6, #3b82f6);
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
  }
  
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(139, 92, 246, 0.5) transparent;
  }
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(139, 92, 246, 0.5);
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(139, 92, 246, 0.7);
  }
`;
document.head.appendChild(style);

export default ReproductorMIDI;
